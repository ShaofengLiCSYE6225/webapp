name: Packer

on:
  pull_request:
    branches: [ "main" ]
    types:
      - closed
# env:
    # AWS_ACCESS_KEY: ${{secrets.AWS_ACCESS_KEY}}
    # AWS_SECRET_ACCESS_KEY: ${{secrets.AWS_ACCESS_SECRET_KEY}}
    # aws_access_key_id: ${{secrets.PROD_ACCESS_KEY}}
    # aws_secret_access_key: ${{secrets.PROD_ACCESS_SECRET_KEY}}
    # AWS_REGION : us-east-1
jobs:
  
  if_merged:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup demo credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{secrets.AWS_ACCESS_KEY}}
          aws-secret-access-key: ${{secrets.AWS_ACCESS_SECRET_KEY}}
          aws-region: us-east-1
      - name: Zip webapp  
        run: | 
          cd ..
          zip -r webapp.zip webapp/
          cd webapp
          ls -al
          sleep 10
          
      - name: Setup `packer`
        uses: hashicorp/setup-packer@main
        id: setup
        
      - name: Run `packer init`
        run: packer init ./packer/webapp.pkr.hcl

      - name: Build `AMI`
        run: packer build ./packer/webapp.pkr.hcl

      - name: Setup demo credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{secrets.PROD_ACCESS_KEY}}
          aws-secret-access-key: ${{secrets.PROD_ACCESS_SECRET_KEY}}
          aws-region: us-east-1
      
      - name: Install Cli
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o /tmp/awscliv2.zip
          unzip -q /tmp/awscliv2.zip -d /tmp
          rm /tmp/awscliv2.zip
          sudo /tmp/aws/install --update
          rm -rf /tmp/aws/

     

      - name: Get ami id
        run: |
          ami_id=$(aws ec2 describe-images --filters "Name=name,Values=csye6225*" --query 'sort_by(Images, &CreationDate)[-1].ImageId' --output text)
          echo "AMI_ID=$ami_id" >> $GITHUB_ENV

      - name: Get template id
        run: template_id=$(aws ec2 describe-launch-templates --query 'sort_by(LaunchTemplates, &LatestVersionNumber)[-1].LaunchTemplateId')
          echo "TEMPLATE_ID=$template_id" >> $GITHUB_ENV

      - name: Get template source version
        run: source_version=$(aws ec2 describe-launch-templates --query 'sort_by(LaunchTemplates, &LatestVersionNumber)[-1].LatestVersionNumber')
          echo "SOURCE_VERSION=$source_version" >> $GITHUB_ENV

      - name: Create launch template version
        run: aws ec2 create-launch-template-version --source-version source_version --launch-template-id template_id --launch-template-data '{"ImageId":${ami_id}}'
      
      # - name: Create autoscaling group
      #   run: aws autoscaling create-auto-scaling-group --min-size 1 --max-size 3 --auto-scaling-group-name asg --launch-template LaunchTemplateId=template_id
      
      - name: Instance refresh
        run: aws autoscaling start-instance-refresh  --auto-scaling-group-name csye6225-asg-spring2023
